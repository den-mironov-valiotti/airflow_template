# for debugging dev env
# use ip and port of real prod db if needed
# Airflow source reference
# https://airflow.apache.org/docs/apache-airflow/2.9.0/docker-compose.yaml
x-airflow-common:
  &airflow-common
  image: intertal_airflow
  build:
    context: .
    dockerfile: airflow.Dockerfile
    args:
      AIRFLOW_UID: $AIRFLOW_UID
      AIRFLOW_USER_HOME_DIR: $AIRFLOW_USER_HOME_DIR
      SELENIUM_LOG_PATH: selenium_logs
      SELENIUM_SCREENSHOTS_PATH: selenium_screenshots
      SELENIUM_COOKIES_PATH: selenium_cookies
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor # use local executor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-dev/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres-dev/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  env_file:
    - ./.env
  volumes:
    - ./dags:/opt/airflow/dags
    - airflow-logs:/opt/airflow/logs
    - airflow-config:/opt/airflow/config
    - airflow-plugins:/opt/airflow/plugins
    - selenium-logs:$AIRFLOW_USER_HOME_DIR/$SELENIUM_LOG_PATH
    - selenium-screenshots:$AIRFLOW_USER_HOME_DIR/$SELENIUM_SCREENSHOTS_PATH
    - selenium-cookies:$AIRFLOW_USER_HOME_DIR/$SELENIUM_COOKIES_PATH
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres-dev: #dev
      condition: service_healthy

services:

  # Database for saving work results
  # psgrs-intertal:
#     container_name: psgrs-intertal
#     image: psgrs_intertal
#     build:
#       context: .
#       dockerfile: psgrs.Dockerfile
#     environment:
#       POSTGRES_USER: $POSTGRES_intertal_USER
#       POSTGRES_PASSWORD: $POSTGRES_intertal_PASSWORD
#       POSTGRES_DB: $POSTGRES_intertal_DB
#     env_file: ./.env
#     volumes:
#       - psgrs_intertal:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "postgres"]
#       interval: 10s
#       retries: 5
#       start_period: 5s
#     restart: always
#     ports:
#       - "13536:5432"
#     networks:
#       - intertal-net

  # Airflow services
  postgres-dev: #renamed
    container_name: postgres-dev
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-postgres-dev:/var/lib/postgresql/data # renamed
    ports:
      - "15432:5432"  # changed
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - intertal-net

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - intertal-net

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    ports:
      - "14080:8080"
    networks:
      - intertal-net

  airflow-scheduler:
    <<: *airflow-common
    command: bash -c "pip install debugpy && python -m debugpy --listen 0.0.0.0:5679 --wait-for-client -m airflow scheduler" # add for debugging
    ports:
      - "5679:5679"  # Debugger port
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8999/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - intertal-net
# not needed for local executor
#  airflow-worker:
#    <<: *airflow-common
#    command: celery worker
#    healthcheck:
#      # yamllint disable rule:line-length
#      test:
#        - "CMD-SHELL"
#        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    environment:
#      <<: *airflow-common-env
#      # Required to handle warm shutdown of the celery workers properly
#      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
#      DUMB_INIT_SETSID: "0"
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#    networks:
#      - intertal-net

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
#    volumes:
#      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - intertal-net

volumes:
  psgrs_intertal:
    external: true # if connection to prod db needed
    #    driver: local # for clean db 
  airflow-postgres-dev: # renamed
    driver: local
  airflow-config:
    driver: local
  airflow-plugins:
    driver: local
  selenium-logs:
    driver: local
  selenium-screenshots:
    driver: local
  selenium-cookies:
    driver: local

networks:
  intertal-net:
